// Load environment variables from `.env` file (optional)
require('dotenv').config();

const express = require('express');
const request = require('request');
const { WebClient } = require('@slack/client');
const { createEventAdapter } = require('@slack/events-api');
const { createMessageAdapter } = require('@slack/interactive-messages');

const clientId = process.env.SLACK_CLIENT_ID;
const clientSecret = process.env.SLACK_CLIENT_SECRET;
const clientSigningSecret = process.env.SLACK_SIGNING_SECRET;
const botId = process.env.SLACK_BOT_ID;
const slackEvents = createEventAdapter(clientSigningSecret);
const slackInteractions = createMessageAdapter(clientSigningSecret);
const port = process.env.PORT || 8080;
const app = express();
const slack = new WebClient(process.env.SLACK_TOKEN);
const channelFile = 'channels.json';

app.use('/event', slackEvents.expressMiddleware());
app.use('/action', slackInteractions.expressMiddleware());

// This route handles get request to a /oauth endpoint. We'll use this endpoint for handling the logic of the Slack oAuth process behind our app.
app.get('/oauth', (req, res) => {
    // When a user authorizes an app, a code query parameter is passed on the oAuth endpoint. If that code is not there, we respond with an error message
    if (!req.query.code) {
        res.status(500);
        res.send({"Error": "Looks like we're not getting code."});
        console.log("Looks like we're not getting code.");
    } else {
        // If it's there...

        // We'll do a GET call to Slack's `oauth.access` endpoint, passing our app's client ID, client secret, and the code we just got as query parameters.
        request({
            url: 'https://slack.com/api/oauth.access', //URL to hit
            qs: {code: req.query.code, client_id: clientId, client_secret: clientSecret}, //Query string data
            method: 'GET', //Specify the method

        }, function (error, response, body) {
            if (error) {
                console.log(error);
            } else {
                res.json(body);

            }
        })
    }
});

slackEvents.on('message', (event) => {
    // ignore events generated by this bot's responses
    if (event.bot_id && event.bot_id == botId) {
        return;
    }
    if (event.message && event.message.bot_id && event.message.bot_id == botId) {
        return;
    }

    const message = event.text.trim().toLowerCase();
    if (message.indexOf('help') != -1) {
        slack.chat.postMessage({
            channel: event.channel,
            text: "Welcome to the Datadog channel manager!",
            attachments: [
                {
                    text: "Choose an option:",
                    fallback: "You are unable to choose an option",
                    callback_id: "menu_button",
                    color: "#3AA3E3",
                    attachment_type: "default",
                    actions: [
                        {
                            name: "request_private_channel",
                            text: "Request a private channel",
                            type: "button"
                        },
                        {
                            name: "list_private_channels",
                            text: "List active private channels",
                            type: "button"
                        }
                    ]
                }
            ]
        }).catch(console.error);
    } else {
        slack.chat.postMessage({
            channel: event.channel,
            text: 'Hello there',
        }).catch(console.error);
    }
});

slackInteractions.action('menu_button', (payload, respond) => {
    let reply = payload.original_message;

    if ('request_private_channel' == payload.actions[0].name) {
        delete reply.attachments[0].actions;
        reply.attachments[0].text = "Requesting private channel...";

        slack.dialog.open({
            trigger_id: payload.trigger_id,
            dialog: {
                callback_id: "channel_request_dialog",
                title: "Request private channel",
                submit_label: "Submit",
                elements: [
                    {
                        type: "text",
                        label: "Channel name",
                        name: "channel_name",
                        min_length: 1,
                        max_length: 21,
                        hint: "May only contain lowercase letters, numbers, hyphens, and underscores."
                    },
                    {
                        type: "select",
                        label: "Invite user",
                        name: "invited_user",
                        data_source: "users"
                    },
                    {
                        type: "text",
                        label: "Organization/Customer",
                        name: "organization",
                        optional: true
                    },
                    {
                        type: "text",
                        subtype: "number",
                        label: "Days until expiry",
                        name: "expire_days"
                    },
                    {
                        type: "textarea",
                        label: "Purpose of channel",
                        name: "purpose",
                        optional: true,
                        max_length: 250
                    }
                ]
            }
        }).catch((error) => {
            console.log('Errors occurred: ', error.data.response_metadata.messages);
        });
    } else if ('list_private_channels' == payload.actions[0].name) {
        delete reply.attachments;

        slack.conversations.list({
            types: 'private_channel',
            limit: 5,
            cursor: payload.actions[0].value || ''
        }).then((res) => {
            let attachments = [];
            res.channels.forEach((channel) => {
                let text = `_${channel.topic.value}_`;
                if (channel.purpose && channel.purpose.value) {
                    text += '\n' + channel.purpose.value;
                }

                attachments.push({
                    title: `#${channel.name}`,
                    text,
                    callback_id: 'join_channel_button',
                    actions: [
                        {
                            name: "join_channel",
                            text: "Join",
                            type: "button",
                            style: "primary",
                            value: channel.id
                        },
                        {
                            name: "archive_channel",
                            text: "Archive",
                            type: "button",
                            value: channel.id
                        }],
                    ts: channel.ts,
                    mrkdwn: true
                });
            });

            attachments.push({
                text: "",
                callback_id: 'menu_button',
                actions: [{
                    name: "list_private_channels",
                    text: "See more channels...",
                    type: "button",
                    value: res.response_metadata.next_cursor
                }]
            });
            respond({ 
                text: "Here is a `list` of the currently active private channels:",
                attachments
            });
        }).catch((error) => {
            console.error('error received: ', error);
        });
    }

    return reply;
});

slackInteractions.action('join_channel_button', (payload, respond) => {
    slack.conversations.invite({
        channel: payload.actions[0].value,
        users: payload.user.id
    }).then((res) => {
        respond({
            text: "Successfully joined channel."
        });
    }).catch((error) => {
        console.error('error received: ', error);
    });
});

slackInteractions.action('channel_request_dialog', (payload, respond) => {
    const me = payload.user.id;
    const invitee = payload.submission.invited_user;
    const organization = payload.submission.organization;
    const channel_name = payload.submission.channel_name.toLowerCase().trim();

    if (invitee == me) {
        return {
            errors: [{
                name: "invited_user",
                error: "You cannot request a new private channel with just yourself in it!"
            }]
        };
    } else if (!/^[a-z0-9_\-]+$/.test(channel_name)) {
        return {
            errors: [{
                name: "channel_name",
                error: "Invalid characters found."
            }]
        };
    }

    let channel = '';
    return slack.users.info({
        user: invitee
    }).then((res) => {
        if (res.user.is_bot || res.user.is_app_user) {
            return {
                errors: [{
                    name: "invited_user",
                    error: "Invited user must be human."
                }]
            };
        } else {
            return slack.conversations.create({
                name: channel_name,
                is_private: true,
                user_ids: `${me},${invitee}`
            })
        }
    }).then((res) => {
        if (res.errors) {
            return res;
        }

        channel = res.channel.id;
        return slack.conversations.setTopic({
            channel,
            topic: `Requested for <@${invitee}> from ${organization}`
        });
    }).then((res) => {
        if (res.errors) {
            return res;
        }

        return slack.conversations.setPurpose({
            channel,
            purpose: payload.submission.purpose
        });
    }).then((res) => {
        if (res.errors) {
            return res;
        }
        respond({ text: `Successfully created private channel for <@${invitee}> from ${organization}!` });
    }).catch((error) => {
        console.error('error received: ', error);
    });
});

// Handle errors (see `errorCodes` export)
slackEvents.on('error', console.error);

app.listen(port, () => {
    console.log("Example app listening on port " + port);
});
