// Load environment variables from `.env` file (optional)
require('dotenv').config();

const express = require('express');
const request = require('request');
const { WebClient } = require('@slack/client');
const { createEventAdapter } = require('@slack/events-api');
const { createMessageAdapter } = require('@slack/interactive-messages');

const clientId = process.env.SLACK_CLIENT_ID;
const clientSecret = process.env.SLACK_CLIENT_SECRET;
const clientSigningSecret = process.env.SLACK_SIGNING_SECRET;
const botId = process.env.SLACK_BOT_ID;
const slackEvents = createEventAdapter(clientSigningSecret);
const slackInteractions = createMessageAdapter(clientSigningSecret);
const port = process.env.PORT || 8080;
const app = express();
const slack = new WebClient(process.env.SLACK_TOKEN);

app.use('/event', slackEvents.expressMiddleware());
app.use('/action', slackInteractions.expressMiddleware());

// This route handles get request to a /oauth endpoint. We'll use this endpoint for handling the logic of the Slack oAuth process behind our app.
app.get('/oauth', (req, res) => {
    // When a user authorizes an app, a code query parameter is passed on the oAuth endpoint. If that code is not there, we respond with an error message
    if (!req.query.code) {
        res.status(500);
        res.send({"Error": "Looks like we're not getting code."});
        console.log("Looks like we're not getting code.");
    } else {
        // If it's there...

        // We'll do a GET call to Slack's `oauth.access` endpoint, passing our app's client ID, client secret, and the code we just got as query parameters.
        request({
            url: 'https://slack.com/api/oauth.access', //URL to hit
            qs: {code: req.query.code, client_id: clientId, client_secret: clientSecret}, //Query string data
            method: 'GET', //Specify the method

        }, function (error, response, body) {
            if (error) {
                console.log(error);
            } else {
                res.json(body);

            }
        })
    }
});

slackEvents.on('message', (event) => {
    // ignore events generated by this bot's responses
    if (event.bot_id && event.bot_id == botId) {
        return;
    }

    const message = event.text.trim().toLowerCase();
    if (message.indexOf('help') != -1) {
        slack.chat.postMessage({
            channel: event.channel,
            text: "Welcome to the Datadog channel manager!",
            attachments: [
                {
                    "text": "Choose an option:",
                    "fallback": "You are unable to choose an option",
                    "callback_id": "menu_button",
                    "color": "#3AA3E3",
                    "attachment_type": "default",
                    "actions": [
                        {
                            "name": "request_private_channel",
                            "text": "Request a private channel",
                            "type": "button"
                        },
                        {
                            "name": "list_private_channels",
                            "text": "List active private channels",
                            "type": "button"
                        }
                    ]
                }
            ]
        }).then((res) => {
            console.log('Message sent: ', res.ts);
        }).catch(console.error);
    } else {
        slack.chat.postMessage({
            channel: event.channel,
            text: 'Hello there',
        }).then((res) => {
            console.log('Message sent: ', res.ts);
        }).catch(console.error);
    }
});

slackInteractions.action('menu_button', (payload, respond) => {
    const message = { text: 'Thank you for clicking the menu button.' };
    respond(message);

    let reply = payload.original_message;
    delete reply.attachments[0].actions;
    return reply;
});

// Handle errors (see `errorCodes` export)
slackEvents.on('error', console.error);

app.listen(port, () => {
    console.log("Example app listening on port " + port);
});
